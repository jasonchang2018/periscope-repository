-- Last Update: 2018-12-14
with post_filters as
(
  select dict.*
    , case
      when '[Aggregation_Level]' = 'Week' then dict.applweek
      else date_trunc('[Aggregation_Level]', dict.appldate)::date end as timestart
  from [bizops_application_details as dict]
  where [dict.appldate>=Timestart_Funding_Tree]
--   and [dict.appldate<=Timeend_Funding_Tree]
  and [newuploanreloan=LoanType]
  and [dict.adgrp=Source_Funding_Tree]
  and [dict.admethod=Admethod_Funding_Tree]
  and [dict.store=State]
  and [dict.BU=BU]
  and [dict.is_neuro_id<=Exclude_Neuro_ID]
  and [dict.APR_Group=APR_States_Funding_Tree]
  and [dict.payfreq=PayFreq_Funding_Tree]
)
select
  extract(week from pf.applweek) as " "
  , pf.applweek

  , count(distinct case when snap."BV" = 1 then pf.loanid end)::numeric/
    count(distinct case when snap."Qualified" = 1 then pf.loanid end) as "BV/Q"

  , count(distinct case when snap."SC" = 1 then pf.loanid end)::numeric/
    count(distinct case when snap."BV" = 1 then pf.loanid end) as "SC/BV"

  , count(distinct case when snap."CS" = 1 then pf.loanid end)::numeric/
    count(distinct case when snap."SC" = 1 then pf.loanid end) as "CS/SC"

  , count(distinct case when snap."CS Decisioned" = 1 then pf.loanid end)::numeric/
    count(distinct case when snap."CS" = 1 then pf.loanid end) as "CS Decisioned/CS"

  , count(distinct case when snap."Funded" = 1 then pf.loanid end)::numeric/
    count(distinct case when snap."CS Decisioned" = 1 then pf.loanid end) as "F/CS Decisioned"
  
  , count(distinct case when snap."Funded" = 1 then pf.loanid end)::numeric/
    count(distinct case when snap."Qualified" = 1 then pf.loanid end) as "Funding Rate"
from
  post_filters as pf
    inner join
      [bizops_process_flow_snapshot_of as snap]
      on pf.loanid = snap.loanid  
group by
  pf.applweek
order by
  pf.applweek desc