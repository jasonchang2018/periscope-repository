-- Last Update: 2018-11-01
with post_filters as
(
  select dict.*
    , case
      when '[Aggregation_Level]' = 'Week' then (date_trunc('[Aggregation_Level]', dict.appldate + '1 day'::interval)::date -'1 day'::interval)::date 
      else date_trunc('[Aggregation_Level]', dict.appldate)::date end as timestart
  from [bizops_application_details as dict]
  where [dict.appldate>=Timestart_Funding_Tree]
  and [dict.appldate<=Timeend_Funding_Tree]
  and [newuploanreloan=LoanType]
  and [dict.adgrp=Source_Funding_Tree]
  and [dict.admethod=Admethod_Funding_Tree]
  and [dict.store=State]
  and [dict.BU=BU]
  and [dict.is_neuro_id<=Exclude_Neuro_ID]
  and [dict.APR_Group=APR_States_Funding_Tree]
  and [dict.payfreq=PayFreq_Funding_Tree]
)
select
  pf.timestart
  , pf.processadmin
  , coalesce(count(distinct case when pf.attempt_ibv = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.qualified = 1 or [pf.is_bcs_1>=Add_Back_BCS1] then pf.loanid end),0),0) as "Attempt IBV/Q"
  , coalesce(count(distinct case when pf.bankverified = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.attempt_ibv = 1 then pf.loanid end),0),0) as "BV/Attempt IBV"
  , coalesce(count(distinct case when pf.passscorecardratecard = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.bankverified = 1 then pf.loanid end),0),0) as "SC/BV"
  , coalesce(count(distinct case when pf.contractsigned = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.passscorecardratecard = 1 then pf.loanid end),0),0) as "CS/SC"
--   , coalesce(count(distinct case when pf.uwq = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.contractsigned = 1 then pf.loanid end),0),0) as "UWQ/CS"
--   , coalesce(count(distinct case when pf.funded = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.uwq = 1 then pf.loanid end),0),0) as "F/UWQ"
--   , coalesce(count(distinct case when pf.funded = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.contractsigned = 1 then pf.loanid end),0),0) as "F/CS"
  , coalesce(count(distinct case when pf.cs_decisioned = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.contractsigned = 1 then pf.loanid end),0),0) as "Decisioned/CS"
  , coalesce(count(distinct case when pf.funded = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.cs_decisioned = 1 then pf.loanid end),0),0) as "F/CS Decision"
  , coalesce(count(distinct case when pf.funded = 1 then pf.loanid end)::numeric/nullif(count(distinct case when pf.qualified = 1 or [pf.is_bcs_1>=Add_Back_BCS1] then pf.loanid end),0),0) as "Funding Rate"
  , count(distinct case when pf.qualified = 1 or [pf.is_bcs_1>=Add_Back_BCS1] then pf.loanid end) as "Volume"
from
  post_filters as pf
  inner join
    cloudlending.user as c_user
    on pf.processadmin = c_user.name
where
  processadmin notnull
  and [c_user.supervisor=Supervisor]
group by
  pf.timestart
  , processadmin
order by
  pf.timestart desc
  , processadmin asc